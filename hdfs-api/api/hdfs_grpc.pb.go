// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: hdfs.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HdfsMasterService_CreateFile_FullMethodName = "/hdfs.HdfsMasterService/CreateFile"
)

// HdfsMasterServiceClient is the client API for HdfsMasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HdfsMasterServiceClient interface {
	CreateFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateFileRequest, CreateFileResponse], error)
}

type hdfsMasterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHdfsMasterServiceClient(cc grpc.ClientConnInterface) HdfsMasterServiceClient {
	return &hdfsMasterServiceClient{cc}
}

func (c *hdfsMasterServiceClient) CreateFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[CreateFileRequest, CreateFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HdfsMasterService_ServiceDesc.Streams[0], HdfsMasterService_CreateFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CreateFileRequest, CreateFileResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsMasterService_CreateFileClient = grpc.ClientStreamingClient[CreateFileRequest, CreateFileResponse]

// HdfsMasterServiceServer is the server API for HdfsMasterService service.
// All implementations must embed UnimplementedHdfsMasterServiceServer
// for forward compatibility.
type HdfsMasterServiceServer interface {
	CreateFile(grpc.ClientStreamingServer[CreateFileRequest, CreateFileResponse]) error
	mustEmbedUnimplementedHdfsMasterServiceServer()
}

// UnimplementedHdfsMasterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHdfsMasterServiceServer struct{}

func (UnimplementedHdfsMasterServiceServer) CreateFile(grpc.ClientStreamingServer[CreateFileRequest, CreateFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedHdfsMasterServiceServer) mustEmbedUnimplementedHdfsMasterServiceServer() {}
func (UnimplementedHdfsMasterServiceServer) testEmbeddedByValue()                           {}

// UnsafeHdfsMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HdfsMasterServiceServer will
// result in compilation errors.
type UnsafeHdfsMasterServiceServer interface {
	mustEmbedUnimplementedHdfsMasterServiceServer()
}

func RegisterHdfsMasterServiceServer(s grpc.ServiceRegistrar, srv HdfsMasterServiceServer) {
	// If the following call pancis, it indicates UnimplementedHdfsMasterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HdfsMasterService_ServiceDesc, srv)
}

func _HdfsMasterService_CreateFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HdfsMasterServiceServer).CreateFile(&grpc.GenericServerStream[CreateFileRequest, CreateFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsMasterService_CreateFileServer = grpc.ClientStreamingServer[CreateFileRequest, CreateFileResponse]

// HdfsMasterService_ServiceDesc is the grpc.ServiceDesc for HdfsMasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HdfsMasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hdfs.HdfsMasterService",
	HandlerType: (*HdfsMasterServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFile",
			Handler:       _HdfsMasterService_CreateFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "hdfs.proto",
}

const (
	HdfsDataNodeService_Heartbeat_FullMethodName     = "/hdfs.HdfsDataNodeService/Heartbeat"
	HdfsDataNodeService_Connect_FullMethodName       = "/hdfs.HdfsDataNodeService/Connect"
	HdfsDataNodeService_PipeHeartbeat_FullMethodName = "/hdfs.HdfsDataNodeService/PipeHeartbeat"
)

// HdfsDataNodeServiceClient is the client API for HdfsDataNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HdfsDataNodeServiceClient interface {
	Heartbeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error)
	Connect(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileActionResponse], error)
	PipeHeartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartBeatRequest, HeartBeatResponse], error)
}

type hdfsDataNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHdfsDataNodeServiceClient(cc grpc.ClientConnInterface) HdfsDataNodeServiceClient {
	return &hdfsDataNodeServiceClient{cc}
}

func (c *hdfsDataNodeServiceClient) Heartbeat(ctx context.Context, in *HeartBeatRequest, opts ...grpc.CallOption) (*HeartBeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartBeatResponse)
	err := c.cc.Invoke(ctx, HdfsDataNodeService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hdfsDataNodeServiceClient) Connect(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileActionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HdfsDataNodeService_ServiceDesc.Streams[0], HdfsDataNodeService_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RegisterRequest, FileActionResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsDataNodeService_ConnectClient = grpc.ServerStreamingClient[FileActionResponse]

func (c *hdfsDataNodeServiceClient) PipeHeartbeat(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[HeartBeatRequest, HeartBeatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HdfsDataNodeService_ServiceDesc.Streams[1], HdfsDataNodeService_PipeHeartbeat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[HeartBeatRequest, HeartBeatResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsDataNodeService_PipeHeartbeatClient = grpc.BidiStreamingClient[HeartBeatRequest, HeartBeatResponse]

// HdfsDataNodeServiceServer is the server API for HdfsDataNodeService service.
// All implementations must embed UnimplementedHdfsDataNodeServiceServer
// for forward compatibility.
type HdfsDataNodeServiceServer interface {
	Heartbeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error)
	Connect(*RegisterRequest, grpc.ServerStreamingServer[FileActionResponse]) error
	PipeHeartbeat(grpc.BidiStreamingServer[HeartBeatRequest, HeartBeatResponse]) error
	mustEmbedUnimplementedHdfsDataNodeServiceServer()
}

// UnimplementedHdfsDataNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHdfsDataNodeServiceServer struct{}

func (UnimplementedHdfsDataNodeServiceServer) Heartbeat(context.Context, *HeartBeatRequest) (*HeartBeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedHdfsDataNodeServiceServer) Connect(*RegisterRequest, grpc.ServerStreamingServer[FileActionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedHdfsDataNodeServiceServer) PipeHeartbeat(grpc.BidiStreamingServer[HeartBeatRequest, HeartBeatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PipeHeartbeat not implemented")
}
func (UnimplementedHdfsDataNodeServiceServer) mustEmbedUnimplementedHdfsDataNodeServiceServer() {}
func (UnimplementedHdfsDataNodeServiceServer) testEmbeddedByValue()                             {}

// UnsafeHdfsDataNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HdfsDataNodeServiceServer will
// result in compilation errors.
type UnsafeHdfsDataNodeServiceServer interface {
	mustEmbedUnimplementedHdfsDataNodeServiceServer()
}

func RegisterHdfsDataNodeServiceServer(s grpc.ServiceRegistrar, srv HdfsDataNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedHdfsDataNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HdfsDataNodeService_ServiceDesc, srv)
}

func _HdfsDataNodeService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HdfsDataNodeServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HdfsDataNodeService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HdfsDataNodeServiceServer).Heartbeat(ctx, req.(*HeartBeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HdfsDataNodeService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HdfsDataNodeServiceServer).Connect(m, &grpc.GenericServerStream[RegisterRequest, FileActionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsDataNodeService_ConnectServer = grpc.ServerStreamingServer[FileActionResponse]

func _HdfsDataNodeService_PipeHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HdfsDataNodeServiceServer).PipeHeartbeat(&grpc.GenericServerStream[HeartBeatRequest, HeartBeatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type HdfsDataNodeService_PipeHeartbeatServer = grpc.BidiStreamingServer[HeartBeatRequest, HeartBeatResponse]

// HdfsDataNodeService_ServiceDesc is the grpc.ServiceDesc for HdfsDataNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HdfsDataNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hdfs.HdfsDataNodeService",
	HandlerType: (*HdfsDataNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _HdfsDataNodeService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _HdfsDataNodeService_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PipeHeartbeat",
			Handler:       _HdfsDataNodeService_PipeHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hdfs.proto",
}
